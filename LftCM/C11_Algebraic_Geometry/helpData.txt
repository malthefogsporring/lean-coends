/- An auxiliary file for `#help`. -/
add_assoc,AddMonoid,AddMonoidAlgebra,add_mul,add_one,add_right_eq_self,aeval_X,Algebra.toRingHom,AlgHom.toRingHom_eq_coe,CharTwo.add_self_eq_zero,CommRing,CommSemiring,congrArg,congrFun,eq_intCast,eq_one?,Equiv.ofBijective,eval_at,eval_at_equiv,eval_at_injective,eval_at_surjective,Function.comp_apply,Function.Injective,Function.Surjective,Int.castRingHom,map_mul,map_nsmul,map_one,MonoidHom.coe_coe,MonoidHom.coe_comp,mul_add,mul_one,natDegree,natDegree_add_eq_left_of_natDegree_lt,natDegree_add_eq_right_of_natDegree_lt,natDegree_C_mul_X,natDegree_C_mul_X_pow,natDegree_C_mul_X_pow_le,natDegree_one,NeZero,NoZeroDivisors,of_apply,one_ne_zero,RingHom.coe_coe,RingHom.id,RingHom.id_apply,RingHom.map_one,Set.mem_insert_iff,Set.mem_singleton_iff,single_mul_single,single_one_one_eq,single_one_one_pow_two,single_pow,Spec_Int_eq,sub_zero,toFinsuppIso,toRingHom,trans_lt,two_mul,X_mul_C,zero_lt_three,ZMod,ZMod.nat_cast_val,ZMod.nat_cast_zmod_surjective
apply,assumption,by_cases,cases,#check,compute_degree!,congr,erw,exact,exact?,ext,fin_cases,#guard_msgs,have,#help,intro,intros,#lemmas,left,let,nontriviality,norm_num,rcases,refine,rfl,right,ring,rw,rwa,simp,simp?,simpa,simp_all,#tactics,trivial,unfold,use
