/-
Copyright (c) 2022 Heather Macbeth. All rights reserved.
Authors: Heather Macbeth, Marc Masdeu
-/
import LftCM.Common
import Mathlib.Data.MvPolynomial.PDeriv
import Mathlib.Data.MvPolynomial.CommRing
import Mathlib.Tactic.Polyrith
import LftCM.Attr

/-
.. PowersCaseSplits:

Nonsingularity of Curves
----------------------------

Powers and case splits
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section gives some extended examples "driving" ``polyrith``.  There are two basic problems
requiring human workarounds that we will discuss.

The first problem arises when the ideal generated by the hypothesis polynomials is not
`radical <https://en.wikipedia.org/wiki/Radical_of_an_ideal>`_.
In the following example, :math:`x-2` (the goal polynomial) does not belong to the ideal
generated by :math:`x ^ 2 - 4 x + 4=(x-2)^2`, but only to its radical.  Unsurprisingly,
``polyrith`` fails.

-/

example {x : ℚ} (hx : x ^ 2 - 4 * x = - 4) : x = 2 := by
  polyrith
-- polyrith failed to retrieve a solution from Sage! ValueError: polynomial is not in the ideal

/-
This can be worked around by applying a lemma such as ``pow_eq_zero``, which states that if a power
of an expression is zero then the expression is also zero.
-/

example {x : ℤ} (hx : x ^ 2 - 4 * x = -4) : x = 2 := by
  have : (x - 2) ^ 2 = 0 := by
    polyrith
  have := pow_eq_zero this
  polyrith

/-
The second problem arises when an argument requires the cancellation of a common factor.  In the
following example ``polyrith`` can deduce that :math:`(r-1)s=(r-1) (-2)`, but the lemma
``mul_left_cancel₀``, to cancel the common
factor :math:`r-1`, requires a separate ``polyrith`` argument to show that it is nonzero.

-/

example {r s : ℚ} (hr : r ≠ 1) (h : r * s - 2 = s - 2 * r) : s = -2 := by
  have hr' : r - 1 ≠ 0
  · contrapose! hr
    polyrith
  apply mul_left_cancel₀ hr'
  polyrith

/-

It might also happen that you can prove a factored identity with ``polyrith``, but don't know
which of the terms is zero -- or either one could be. In this case you can carry out a case split
using the lemma ``eq_zero_or_eq_zero_of_mul_eq_zero`` or similar.

-/

example {r s : ℚ} (h : r * s - 2 = s - 2 * r) : r = 1 ∨ s = -2 := by
  have : (r - 1) * (s + 2) = 0
  · polyrith
  cases' eq_zero_or_eq_zero_of_mul_eq_zero this with H H
  -- the case `r - 1 = 0`
  · left; linear_combination H
  -- the case `s + 2 = 0`
  · right; linear_combination H

noncomputable section

open MvPolynomial

variable (K : Type _) [Field K] [CharZero K]

/-! This file contains a lot of computationally-intensive evaluation of polynomials and their
derivatives. We speed it up slightly by specifiying in advance the path the simplifier should take.
-/

attribute [polynomial_simps] MvPolynomial.eval_X MvPolynomial.eval_C
  map_add map_sub map_mul map_neg map_bit0 map_bit1 map_one map_pow map_zero
  Matrix.cons_val_zero Matrix.cons_val_one Matrix.head_cons
  Matrix.cons_vec_bit0_eq_alt0 Matrix.cons_vec_bit1_eq_alt1
  Matrix.cons_vecAlt0 Matrix.cons_vecAlt1
  Matrix.cons_vecAppend Matrix.empty_vecAppend
  Derivation.leibniz Derivation.leibniz_pow pderiv_C pderiv_X_of_ne pderiv_X_self Pi.single_eq_of_ne
  Algebra.id.smul_eq_mul nsmul_eq_mul
  Nat.cast_bit1 Nat.cast_bit0 Nat.cast_one
  mul_zero zero_mul mul_one one_mul add_zero zero_add pow_one mul_neg neg_zero

section klein

/-
.. Klein:

Klein quartic
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Fix a field :math:`K` of characteristic zero. A homogenous polynomial in three variables :math:`p(x,y,z)`
defines an algebraic curve
:math:`\{[x:y:z]\in K\mathbb{P}^2:p(x,y,z)=0\}` in the projective plane :math:`K\mathbb{P}^2`.

This curve is said to be *nonsingular*, if there is no point on the curve where the vector of
partial derivatives

.. math::

    \begin{pmatrix}
      \partial_xp(x,y,z)\\
      \partial_yp(x,y,z)\\
      \partial_zp(x,y,z)
    \end{pmatrix}

vanishes entirely.

In this section and the next we prove the nonsingularity of a couple of examples of curves in the
projective plane.

First we consider the Klein quartic curve :math:`x^3y + y^3z + z^3x = 0`.

.. figure:: /figures/klein_quartic.png
  :scale: 40 %
  :alt: the Klein quartic

  The Klein quartic restricted to the real affine plane :math:`x+y+z= 1`.

-/
-- use (2x+1), (1-x+√3y), (1-x-√3y) for a nice picture
/-- Defining polynomial for the Klein quartic curve x³y + y³z + z³x = 0 as a projective hypersurface
in Kℙ². -/
@[reducible]
def klein : MvPolynomial (Fin 3) K :=
  X 0 ^ 3 * X 1 + X 1 ^ 3 * X 2 + X 2 ^ 3 * X 0

/-
The vector of partial derivatives of this polynomial is

.. math::

    \begin{pmatrix}
      3x^2y + z ^ 3\\
      x ^ 3 + 3y^2z\\
      y ^ 3 + 3z ^ 2x
    \end{pmatrix}.

We need to show that there is nowhere on the curve where these three cubic polynomials all vanish,
or equivalently that if these three polynomials and the quartic :math:`x^3y + y^3z + z^3x` all vanish
then :math:`x=y=z=0`.

Here is a possible approach:  By eye, looking at appropriate multiples

.. math::

    x(3x^2y + z ^ 3), \qquad y(x ^ 3 + 3y^2z), \qquad z(y ^ 3 + 3z ^ 2x)

of the vector of partial derivatives, I can
see that we have three different linear combinations of :math:`x^3y`, :math:`y^3z` and :math:`z^3x`
which vanish.  So use ``polyrith`` to prove that, say, :math:`y^3z=0`.

Now do a case split, deducing that either :math:`y^3 = 0` or :math:`z = 0`.  Deduce using
``pow_eq_zero`` that in the former case :math:`y = 0`.

In either case, ``polyrith`` now has enough information to deduce that the cubes of the remaining
variables vanish.  Apply ``pow_eq_zero`` again to deduce that the variables themselves vanish.

Once you have hypotheses ``hx``, ``hy``, ``hz`` for the vanishing of the three
variables, you can solve the problem with ``simp [hx, hy, hz]``.
-/

/-- The Klein quartic is nonsingular. -/
example {x y z : K} (h : MvPolynomial.eval ![x, y, z] (klein K) = 0)
    (hdz : ∀ i, MvPolynomial.eval ![x, y, z] (MvPolynomial.pderiv i (klein K)) = 0) :
    ![x, y, z] = 0 := by
  have : 3 - 1 = 2 := by norm_num
  have h₀ := hdz 0
  have h₁ := hdz 1
  have h₂ := hdz 2
  simp only [this, polynomial_simps] at h h₀ h₁ h₂
  norm_num at h h₀ h₁ h₂
  have : y ^ 3 * z = 0
  · sorry
  rcases eq_zero_or_eq_zero_of_mul_eq_zero this with hy | rfl
  · sorry -- show that z^3=x^3=0 and go from there.
  · sorry -- show that x^3=y^3=0 and go from there.
end klein

section weierstrass

/-

.. _weierstrass:

Weierstrass-form elliptic curve
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Next, we consider an elliptic curve in Weierstrass normal form :math:`zy^2 = x^3 + pxz^2 + qz^3`.

.. figure:: /figures/cubic.png
  :scale: 40 %
  :alt: a Weierstrass-normal-form elliptic curve

  A Weierstrass-normal-form elliptic curve with positive discriminant.

We fix the parameters :math:`p` and :math:`q` explicitly.

-/
-- NB cubic depicted is y ^ 2 = x ^ 3 - x + 1
variable (p q : K)

/-- Defining polynomial for a Weierstrass-form elliptic curve zy² = x³ + pxz² + qz³ as a projective
hypersurface in Kℙ². -/
@[reducible]
def weierstrass : MvPolynomial (Fin 3) K :=
  -X 2 * X 1 ^ 2 + X 0 ^ 3 + C p * X 0 * X 2 ^ 2 + C q * X 2 ^ 3

/-
The vector of partial derivatives of this polynomial is

.. math::

    \begin{pmatrix}
      3x ^ 2 + pz ^ 2\\
      -2yz\\
      -y ^ 2 + 2pxz + 3qz ^ 2
    \end{pmatrix}.

It turns out that a Weierstrass-form elliptic curve is nonsingular if its *discriminant*,
:math:`27q^2+4p^3`, does not vanish.  To prove this we need to show that if there is a (nonzero)
point :math:`[x:y:z]` where the polynomial and its partial derivatives vanish, then
:math:`27q^2+4p^3` vanishes.

A possible approach is as follows.  First do a case split depending on whether we are on the line
at infinity, :math:`z=0`.  If we are on the line at infinity, ``polyrith`` will give you the
vanishing of certain powers of :math:`x` and :math:`y` (you'll need to work out which).  Apply
``pow_eq_zero`` as needed. Once you have hypotheses ``hx``, ``hy``, ``hz`` for the vanishing of the
three variables, you can solve the problem with ``simp [hx, hy, hz]``.

Away from the line at infinity, we have that :math:`z\ne 0`.  If the polynomial and its partial
derivatives vanish at such an :math:`[x:y:z]`, we successively deduce that :math:`y=0`, that
:math:`2 p x + 3 q z = 0`, that :math:`9 q x - 2 p ^ 2 z=0`, and that :math:`27q^2+4p^3=0`. For
each of these four ``polyrith`` deductions you will have to apply ``mul_left_cancel₀`` with the
nonvanishing of :math:`z`: each time the expression itself is not in the ideal but its product with
:math:`z` is.
-/

set_option maxHeartbeats 500000

/-- A Weierstrass-form elliptic curve with nonzero discriminant `27 * q ^ 2 + 4 * p ^ 3` is
nonsingular. -/
example {x y z : K} (disc : 27 * q ^ 2 + 4 * p ^ 3 ≠ 0)
    (h : MvPolynomial.eval ![x, y, z] (weierstrass K p q) = 0)
    (hdz : ∀ i, MvPolynomial.eval ![x, y, z] (MvPolynomial.pderiv i (weierstrass K p q)) = 0) :
    ![x, y, z] = 0 := by
  have h₀ := hdz 0
  have h₁ := hdz 1
  have h₂ := hdz 2
  simp at h h₀ h₁ h₂
  norm_num at h h₀ h₁ h₂
  -- deal separately with the line at infinity, `z = 0`
  rcases eq_or_ne z 0 with rfl | hz
  · sorry -- show that x^2=y^2=0 first
  · apply absurd (h₂ := disc)
    sorry -- show that 2*p*x + 3*q*z = 0 and that 9*q*x-2*p^2*z=0 first

end weierstrass
